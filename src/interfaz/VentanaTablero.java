/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package interfaz;

import dominio.Ficha;
import dominio.Jugador;
import dominio.Sistema;
import dominio.Tablero;
import java.awt.event.*;
import java.awt.*;
import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.LineBorder;

/**
 *
 * @author Caro
 */
public class VentanaTablero extends javax.swing.JFrame {

    private Sistema sistema;
    private Ficha[][] tablero;
    private Jugador jugador1;
    private Jugador jugador2;
    private int contadorMovimientos = 0; // setear en par al arrancar una jugada
    private String fichaAnterior = "";

    public int getContadorMovimientos() {
        return contadorMovimientos;
    }

    public void setContadorMovimientos(int contadorMovimientos) {
        this.contadorMovimientos = contadorMovimientos;
    }

    public VentanaTablero() {
        initComponents();
    }

    public VentanaTablero(Sistema sistema) {
        initComponents();
        this.setResizable(false);
        this.setDefaultCloseOperation(EXIT_ON_CLOSE);
        this.setLocationRelativeTo(null);
        this.sistema = sistema;
        jugador1 = sistema.getJugador1();
        jugador2 = sistema.getJugador2();
        actualizarTurno();
        tablero = sistema.getTablero().getTablero();
        //Tamaño por defecto de la ventana (JFrame) al abrirlo
        this.setSize(new Dimension(600, 600));
        panelJuego.setLayout(new GridLayout(8, 9));
        int largo = tablero[0].length - 1;
        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 9; j++) {
                JButton jButton = new JButton();
                jButton.addActionListener(new VentanaTablero.ListenerBoton(i, j));
                Ficha ficha = new Ficha(" ", " ", jButton);
                if (i == 0) {
                    if (j != 0) {
                        ficha = new Ficha(String.valueOf(j), "AZUL", jugador2, jButton);
                        tablero[i][j] = ficha;
                    } else {
                        tablero[i][j] = ficha;
                    }
                } else if (i == tablero.length - 1) {
                    if (j != tablero[0].length - 1) {
                        ficha = new Ficha(String.valueOf(largo--), "ROJO", jugador1, jButton);
                        tablero[i][j] = ficha;
                    } else {
                        tablero[i][j] = ficha;
                    }
                } else {
                    tablero[i][j] = ficha;
                }
                ficha.getBoton().setForeground(Color.WHITE);
                ficha.getBoton().setText(ficha.getNro());
                switch (ficha.getColor()) {
                    case "ROJO":
                        jButton.setBackground(Color.RED);
                        break;
                    case "AZUL":
                        jButton.setBackground(Color.BLUE);
                        break;
                    default:
                        jButton.setBackground(Color.WHITE);
                        break;
                }
                panelJuego.add(ficha.getBoton());
            }
        }
    }

    //Método que actualiza el tablero en cada jugada
    public void mostrarTablero(Tablero tablero) {

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelJuego = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        lbljugador = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        panelJuego.setBackground(new java.awt.Color(204, 204, 204));
        panelJuego.setName("panelJuego"); // NOI18N
        panelJuego.setLayout(null);
        getContentPane().add(panelJuego);
        panelJuego.setBounds(90, 60, 450, 400);

        jButton1.setText("Terminar turno");
        jButton1.setBorder(null);
        getContentPane().add(jButton1);
        jButton1.setBounds(90, 480, 450, 40);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("Turno de: ");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(210, 10, 80, 40);

        lbljugador.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 18)); // NOI18N
        lbljugador.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        getContentPane().add(lbljugador);
        lbljugador.setBounds(300, 10, 240, 40);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Tablero.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Tablero.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Tablero.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Tablero.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaTablero().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel lbljugador;
    private javax.swing.JPanel panelJuego;
    // End of variables declaration//GEN-END:variables

    private class ListenerBoton implements ActionListener {

        private int x;
        private int y;

        public ListenerBoton(int i, int j) {
            // en el constructor se almacena la fila y columna que se presionó
            x = i;
            y = j;
        }

        public void actionPerformed(ActionEvent e) {
            // cuando se presiona un botón, se ejecutará este método
            clickBoton(x, y);
        }
    }

    private void clickBoton(int fila, int columna) {
        desmarcarPosiblesMovimientos();
        if (contadorMovimientos % 2 == 0) {
            if (validarFichaJugador(fila, columna)) {
                marcarPosiblesMovimientos(fila, columna);
                fichaAnterior = fila + "" + columna;
                contadorMovimientos++;
            } else {
                JOptionPane.showMessageDialog(this, "Movimiento inválido", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            if ((fila + "" + columna).equals(fichaAnterior)) {
                JOptionPane.showMessageDialog(this, "Debe seleccionar una posición distinta a la original", "Error", JOptionPane.ERROR_MESSAGE);
                fichaAnterior = "";
                contadorMovimientos++;
            } else {
                fichaAnterior = "";
                contadorMovimientos++;
                sistema.cambiarTurno();
                actualizarTurno();
                JOptionPane.showMessageDialog(this, "Movimiento válido!!", "Aviso", JOptionPane.INFORMATION_MESSAGE);

                //JOptionPane.showMessageDialog(this, fila + "/" + columna + "dif");
            }
        }
    }

    private void marcarPosiblesMovimientos(int fila, int columna) {
        Ficha ficha = tablero[fila][columna];
        Ficha posibleMovimiento;
        int color = (ficha.getColor().equals("ROJO")) ? -1 : 1;
        Border bordePosibleMovimiento = new LineBorder(Color.GREEN, 5);
        String movimiento = ficha.getNro() + "A";
        if (sistema.validarMovimiento(movimiento, sistema.getTurno())) {
            posibleMovimiento = tablero[fila + color][columna];
            posibleMovimiento.getBoton().setBorder(bordePosibleMovimiento);
        }
        movimiento = ficha.getNro() + "D";
        if (sistema.validarMovimiento(movimiento, sistema.getTurno())) {
            posibleMovimiento = tablero[fila + color][columna + 1];
            posibleMovimiento.getBoton().setBorder(bordePosibleMovimiento);
        }
        movimiento = ficha.getNro() + "I";
        if (sistema.validarMovimiento(movimiento, sistema.getTurno())) {
            posibleMovimiento = tablero[fila + color][columna - 1];
            posibleMovimiento.getBoton().setBorder(bordePosibleMovimiento);
        }
    }

    private boolean validarFichaJugador(int fila, int columna) {
        Ficha fichaSeleccionada = tablero[fila][columna];
        boolean valido = false;
        if (fichaSeleccionada.getJugador() != null) {
            if (fichaSeleccionada.getJugador().equals(sistema.getTurno())) {
                valido = true;
            }
        }
        return valido;
    }

    public void actualizarTurno() {
        lbljugador.setText(sistema.getTurno().getAlias());
    }

    private void desmarcarPosiblesMovimientos() {
        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 9; j++) {
                tablero[i][j].getBoton().setBorder(null);
            }
        }
    }

}
